{"version":3,"sources":["axios.js","state.js","Search.js","MovieList.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Search","dispatch","movies","useState","searchInput","setSearchInput","searchMovies","e","a","preventDefault","url","get","res","console","log","data","results","type","id","onSubmit","className","placeholder","onChange","target","MovieList","movieList","map","movie","key","alt","original_title","src","backdrop_path","poster_path","App","stickyHeader","useRef","myMovieContainer","useEffect","adjustStickyHeader","current","setAttribute","clientHeight","window","addEventListener","removeEventListener","state","action","ref","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ySAMeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iCCFAC,EAAeC,0BACfC,EAAgB,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,SAAzB,OAC3B,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAC/CC,IAGQI,EAAgB,kBAAMC,qBAAWV,ICkC/BW,MArCf,WAAmB,IAAD,EACiBF,IADjB,mBACKG,GADL,KACLC,OADK,QAEwBC,mBAAS,IAFjC,mBAEPC,EAFO,KAEMC,EAFN,KAGRC,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACjBD,EAAEE,iBADe,SAGPC,EAHO,sFAG8EN,EAH9E,wCAIKlB,EAAMyB,IAAID,GAJf,OAIPE,EAJO,OAKbC,QAAQC,IAAIF,EAAIG,KAAKC,SACrBf,EAAS,CACLgB,KAAM,SACNf,OAAQU,EAAIG,KAAKC,UARR,kDAWbH,QAAQC,IAAR,MAXa,0DAAH,sDAclB,OACI,oCACI,0BAAMI,GAAG,aAAaC,SAAUb,GAC5B,yBAAKc,UAAU,gBACX,yBAAKA,UAAU,eACX,8CAEJ,yBAAKA,UAAU,eACX,2BAAOH,KAAK,OAAOI,YAAY,iBAAiBzB,MAAOQ,EACvDkB,SAAW,SAACf,GAAD,OAAOF,EAAeE,EAAEgB,OAAO3B,WAE9C,yBAAKwB,UAAU,gBACX,2BAAOH,KAAK,SAASrB,MAAM,eAAewB,UAAU,uBCb7DI,MAjBf,WACI,IACMC,EAAY3B,IAAgB,GAAGI,OACrC,OACI,oCACI,wBAAIkB,UAAU,cACTK,EAAUC,KAAI,SAACC,GACZ,OAAO,wBAAIP,UAAU,OAAOQ,IAAKD,EAAMT,IACvC,yBAAKW,IAAKF,EAAMG,eAAgBC,IAAG,UAPhC,wCAOgC,OAAkBJ,EAAMK,eAAgBL,EAAMM,eACjF,uCAASN,EAAMG,wBC+CpBI,MArDf,WACE,IAAMC,EAAeC,mBACfC,EAAmBD,mBAgCzB,OAdDE,qBAAU,WACP,IAAMC,EAAqB,WACzBF,EAAiBG,QAAQC,aAAa,QAAtC,uBAA+DN,EAAaK,QAAQE,aAAa,GAAjG,QAMF,OAHAH,IACAI,OAAOC,iBAAiB,SAAUL,GAE3B,WACLI,OAAOE,oBAAoB,SAAUN,MAGvC,IAGA,kBAAC,EAAD,CAAe9C,aAhCI,CACnBS,OAAQ,IA+BmCV,QA5B7B,SAACsD,EAAOC,GACtB,OAAQA,EAAO9B,MACb,IAAK,SACH,OAAO,2BACF6B,GADL,IAEE5C,OAAQ6C,EAAO7C,SAGnB,QACE,OAAO4C,KAoBT,yBAAK1B,UAAU,OACf,yBAAKA,UAAU,gBAAgB4B,IAAKb,GAClC,yBAAKf,UAAU,aACb,4CACA,kBAAC,EAAD,QAGF,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kBAAkB4B,IAAKX,GACpC,kBAAC,EAAD,WCvCQY,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.1008b301.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n});\n\nexport default instance;","import React, {createContext, useContext, useReducer} from 'react';\nexport const StateContext = createContext();\nexport const StateProvider = ({reducer, initialState, children}) =>(\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\nexport const useStateValue = () => useContext(StateContext);","import React, {useState} from 'react';\nimport axios from './axios';\nimport { useStateValue } from './state';\n\nfunction Search() {\n    const [{ movies }, dispatch] = useStateValue();\n    const [searchInput, setSearchInput] = useState(\"\");\n    const searchMovies = async (e) => {\n        e.preventDefault();\n        try{\n            const url = `/search/movie?api_key=5dcf7f28a88be0edc01bbbde06f024ab&language=en-US&query=${searchInput}&page=1&include_adult=false`;\n            const res = await axios.get(url);\n            console.log(res.data.results);\n            dispatch({\n                type: 'search',\n                movies: res.data.results\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n    return (\n        <>\n            <form id=\"movie-form\" onSubmit={searchMovies}>\n                <div className=\"search-movie\">\n                    <div className=\"movie-label\">\n                        <label>Movie Name</label>\n                    </div>\n                    <div className=\"search-text\">\n                        <input type=\"text\" placeholder=\"i:e spider man\" value={searchInput} \n                        onChange= {(e) => setSearchInput(e.target.value)} ></input>\n                    </div>\n                    <div className=\"submit-movie\">\n                        <input type=\"submit\" value=\"Search Movie\" className=\"search-button\"></input>\n                    </div>\n                </div>\n            </form>\n        </>\n    );\n};\n\nexport default Search\n","import React from 'react';\nimport { useStateValue } from './state';\n\nfunction MovieList() {\n    const imgBaseUrl = \"https://image.tmdb.org/t/p/original/\";\n    const movieList = useStateValue()[0].movies;\n    return (\n        <>\n            <ul className=\"movie-card\">\n                {movieList.map((movie) => {\n                    return <li className=\"card\" key={movie.id}>\n                    <img alt={movie.original_title} src={`${imgBaseUrl}${movie.backdrop_path|| movie.poster_path}`}></img>\n                    <div>{`${movie.original_title}`}</div>\n                    </li>\n                })}\n            </ul>\n        </>\n    );\n};\n\nexport default MovieList\n","import React, {useEffect, useRef} from 'react';\nimport './App.css';\nimport Search from './Search'\nimport MovieList from './MovieList';\nimport { StateProvider } from './state';\n\nfunction App() {\n  const stickyHeader = useRef();\n  const myMovieContainer = useRef();\n  const initialState = {\n    movies: []\n  };\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case 'search':\n        return {\n          ...state,\n          movies: action.movies\n        };\n        \n      default:\n        return state;\n    }\n  };\n\n useEffect(() => {\n    const adjustStickyHeader = () => {\n      myMovieContainer.current.setAttribute(\"style\", `margin-top : ${stickyHeader.current.clientHeight+20}px`);\n    };\n\n    adjustStickyHeader();\n    window.addEventListener('resize', adjustStickyHeader);\n\n    return () => {\n      window.removeEventListener('resize', adjustStickyHeader);\n    };\n\n }, []);\n\n  return (\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <div className=\"app\">\n      <div className=\"sticky-search\" ref={stickyHeader} >\n        <div className=\"container\">\n          <h1>Movie Search</h1>\n          <Search/>\n        </div>\n      </div>\n        <div className=\"container\">\n          <div className='movie-container' ref={myMovieContainer}>\n            <MovieList/>\n          </div>\n        </div>\n      </div>\n    </StateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}